using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MovieLibrary
{
    // Abstract class required if any member is abstract
    //  1. Cannot be instantiacted
    //  2. Must be derived from
    //  3. Derived class must implement all abstract members
    public abstract class MovieDatabase : IMovieDatabase
    {
        public Movie Add ( Movie movie )
        {
            // Exception type is the base type of all exceptions
            // Arguments should always fail with Argument exceptions
            // Exception -> ArgumentException
            //      ArgumentNullException -> argument is null and it shouldn't be
            //      ArgumentOutofRangeException -> argument is outside accepted range (generally numeric)
            //  ValidationException -> IValidateObject fails
            //  InvalidOperationException -> The operation is not currently valid, but may be in the future
            //  SystemExceptino -> Only generated by runtime
            //      NullReferenceException -> null is on left side of member access (null.???)
            //      StackOverflowException -> Stack overflowed
            //      OutOfMemoryException -> Out of memory

            
            // Throw an excpection using throw expression
            //      throw-expression ::= throw E
            //              E must be Exception
            // Movie is not null
            if (movie == null)
                throw new ArgumentNullException(nameof(movie));    // Argument is null and it shouldn't be, pretty much all reference types

            // Movie is valid
            new ObjectValidator().ValidateFullObject(movie);
            //var results = new ObjectValidator().TryValidateFullObject(movie);
            //if (results.Count() > 0)
            //{
            //    foreach (var result in results)
            //    {
            //        error = result.ErrorMessage;
            //        return null;
            //    };
            //};

            // Movie name is unique
            //var existing = GetByName(movie.Name);
            //if (existing != null)
            //    throw new InvalidOperationException("Movie must be unique");

            // Throw expression ::= E ?? throw E
            var existing = GetByName(movie.Name) ?? throw new InvalidOperationException("Movie must be unique");
            //{
            //    error = "Movie msut be unique";
            //    return null;
            //};

            //error = null;
            //TODO: Generalize errors
            return AddCore(movie);
        }

        protected abstract Movie AddCore ( Movie movie );

        protected abstract void DeleteCore ( int id );

        protected abstract IEnumerable<Movie> GetAllCore ();

        protected abstract Movie GetByIdCore ( int id );

        protected abstract void UpdateCore ( int id, Movie movie );

        protected virtual Movie GetByName ( string name )
        {
            foreach (var movie in GetAll())
            {
                if (String.Compare(movie.Name, name, true) == 0)
                    return movie;
            };

            return null;
        }

        public void Delete ( int id )
        {
            // Validate id >= 0
            if (id < 0)
                throw new ArgumentOutOfRangeException(nameof(id), "Id must be greater than zero");

            DeleteCore(id);

            #region For Arrays
            //for (var index = 0; index < _movies.Length; ++index)
            //{
            //    // Array element access ::= V[int]
            //    //if (_movies[index] != null && _movies[index].Id == id)
            //    if (_movies[index]?.Id == id)   // null conditional ?. if instance != null, access the member
            //    {
            //        _movies[index] = null;
            //        return;
            //    };
            //}
            #endregion
        }

        public void Update ( int id, Movie movie )
        {

            // Validation
            if (id < 0)
                throw new ArgumentOutOfRangeException(nameof(id), "Id must be greater than zero");
            if (movie == null)
                throw new ArgumentNullException(nameof(movie));

            // Movie is valid
            new ObjectValidator().ValidateFullObject(movie);
            //var results = new ObjectValidator().TryValidateFullObject(movie);
            //if (results.Count() > 0)
            //{
            //    foreach (var result in results)
            //    {
            //        return result.ErrorMessage;
            //    };
            //};

            // Movie name is unique
            var existing = GetByName(movie.Name);
            if (existing != null && existing.Id != id)
                throw new InvalidOperationException("Movie must be unique");
            //if (existing != null && existing.Id != id)
            //{
            //    return "Movie must be unique";
            //};

            // updated movie is valid
            // updated movie name is unique
            UpdateCore(id, movie);
        }

        // Use IEnumerable<T> for readonly lists of items
        // public Movie[] GetAll()
        public IEnumerable<Movie> GetAll ()
        {
            //object value = null;
            //value.ToString();

            return GetAllCore();
        }

        public Movie Get ( int id )
        {
            // Validate id >= 0
            if (id < 0)
                throw new ArgumentOutOfRangeException(nameof(id), "Id must be greater than zero");

            return GetByIdCore(id);
        }
    }
}
